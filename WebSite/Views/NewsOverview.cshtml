@using Logic.Helpers
@inherits UmbracoTemplatePage
@{
    Layout = "ContentBase.cshtml";

    // If the editor has not explicitly provided the "Page title" property page
    // then just show the name of the page otherwise show the provided title
    var pageTitle = string.IsNullOrWhiteSpace(CurrentPage.Title)
        ? CurrentPage.Name
        : CurrentPage.Title;

    // Model.Content is the current page that we're on
    // AncestorsOrSelf is all of the ancestors this page has in the tree
    // (1) means: go up to level 1 and stop looking for more ancestors when you get there
    // First() gets the first ancestor found (the home page, on level 1)
    var homePage = Model.Content.AncestorOrSelf(1);// CurrentPage.AncestorsOrSelf(1).First();

    // Find all pages with document type alias umbNewsOverview
    // We do that using the plural, umbNewsOverviews (note the extra "s" in the end)
    // Then take the first one, as we know there will only be on news overview page
    var newsOverview = homePage.ChildrenOfDocType(Consts.NewsOverviewDocType.Alias).First();

    // Similar to above: find all pages with document type umbNewsItem under the news overview page
    // Then order them, first by publishDate (a property the editor can explicitly set on the news item)
    // and then by createDate, which is set by Umbraco automatically when a page gets created.
    //var newsItems = newsOverview.NewsItems.OrderBy("publishDate desc, createDate desc").Take(8);
    var newsItems = newsOverview.ChildrenOfDocType(Consts.NewsItemDocType.Alias).OrderBy("createDate desc").ToList();

    var mdColsCount = 5;
    var smColsCount = 3;
}

@section Body
{
    <div class="row col-15 no-gutters">
        @for (int i = 0; i < newsItems.Count(); i++)
        {
            var item = newsItems[i];

            // If the editor has not explicitly provided the "Page title" property page
            // then just show the name of the page otherwise show the provided title
            var title = item.GetPropertyValue<string>(Consts.NewsItemDocType.TitleProperty);
            var image = item.GetPropertyValue<string>(Consts.NewsItemDocType.ImageProperty);
            title = string.IsNullOrWhiteSpace(title) ? item.Name : title;
            <div class="col-md-3 col-sm-5">
                <a class="news-item" href="@item.Url">
                    @if (!string.IsNullOrWhiteSpace(image))
                    {
                        <img src="@Html.GetThumbnailUrl(image)" alt="" />
                    }
                    <div class="news-item-title">@title</div>
                </a>
            </div>

            if ((i + 1) % mdColsCount == 0 && i > 0)
            {
                <div class="clearfix hidden-xs hidden-sm"></div>
            }
            if ((i + 1) % smColsCount == 0 && i > 0)
            {
                <div class="clearfix visible-sm-block"></div>
            }
        }
    </div>
}